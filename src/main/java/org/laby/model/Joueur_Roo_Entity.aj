// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.laby.model;

import java.lang.Integer;
import java.lang.Long;
import java.lang.SuppressWarnings;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.Version;
import org.laby.model.Joueur;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Joueur_Roo_Entity {
    
    declare @type: Joueur: @Entity;
    
    @PersistenceContext
    transient EntityManager Joueur.entityManager;
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    private Long Joueur.id;
    
    @Version
    @Column(name = "version")
    private Integer Joueur.version;
    
    public Long Joueur.getId() {
        return this.id;
    }
    
    public void Joueur.setId(Long id) {
        this.id = id;
    }
    
    public Integer Joueur.getVersion() {
        return this.version;
    }
    
    public void Joueur.setVersion(Integer version) {
        this.version = version;
    }
    
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void Joueur.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Joueur.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Joueur attached = Joueur.findJoueur(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Joueur.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public Joueur Joueur.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Joueur merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Joueur.entityManager() {
        EntityManager em = new Joueur().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    @Transactional
    public static long Joueur.countJoueurs() {
        return ((Number) entityManager().createQuery("select count(o) from Joueur o").getSingleResult()).longValue();
    }
    
    @SuppressWarnings("unchecked")
    @Transactional
    public static List<Joueur> Joueur.findAllJoueurs() {
        return entityManager().createQuery("select o from Joueur o").getResultList();
    }
    
    @Transactional
    public static Joueur Joueur.findJoueur(Long id) {
        if (id == null) return null;
        Query query = entityManager().createQuery("select o from Joueur o where o.id = :id").setParameter("id",id);
        Joueur result = null;
        List results = query.getResultList();
        if (results.size() > 0) {
            result = (Joueur) results.get(0);
        }
        return result;
    }
    
    @SuppressWarnings("unchecked")
    @Transactional
    public static List<Joueur> Joueur.findJoueurEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("select o from Joueur o").setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
