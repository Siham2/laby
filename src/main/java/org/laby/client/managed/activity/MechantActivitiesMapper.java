// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package org.laby.client.managed.activity;

import com.google.gwt.activity.shared.Activity;
import com.google.gwt.place.shared.PlaceController;
import com.google.gwt.requestfactory.shared.EntityProxyId;
import com.google.gwt.requestfactory.shared.RequestContext;
import org.laby.client.managed.request.ApplicationRequestFactory;
import org.laby.client.managed.request.MechantProxy;
import org.laby.client.managed.request.MechantRequest;
import org.laby.client.managed.request.NiveauProxy;
import org.laby.client.managed.ui.MechantDetailsView;
import org.laby.client.managed.ui.MechantEditView;
import org.laby.client.managed.ui.MechantListView;
import org.laby.client.managed.ui.MechantMobileDetailsView;
import org.laby.client.managed.ui.MechantMobileEditView;
import org.laby.client.scaffold.ScaffoldApp;
import org.laby.client.scaffold.place.CreateAndEditProxy;
import org.laby.client.scaffold.place.FindAndEditProxy;
import org.laby.client.scaffold.place.ProxyPlace;

public class MechantActivitiesMapper {

    private final ApplicationRequestFactory requests;

    private final PlaceController placeController;

    public MechantActivitiesMapper(ApplicationRequestFactory requests, PlaceController placeController) {
        this.requests = requests;
        this.placeController = placeController;
    }

    public Activity getActivity(ProxyPlace place) {
        switch(place.getOperation()) {
            case DETAILS:
                return new MechantDetailsActivity((EntityProxyId<MechantProxy>) place.getProxyId(), requests, placeController, ScaffoldApp.isMobile() ? MechantMobileDetailsView.instance() : MechantDetailsView.instance());
            case EDIT:
                return makeEditActivity(place);
            case CREATE:
                return makeCreateActivity();
        }
        throw new IllegalArgumentException("Unknown operation " + place.getOperation());
    }

    @SuppressWarnings("unchecked")
    private EntityProxyId<org.laby.client.managed.request.MechantProxy> coerceId(ProxyPlace place) {
        return (EntityProxyId<MechantProxy>) place.getProxyId();
    }

    private Activity makeCreateActivity() {
        MechantEditView.instance().setCreating(true);
        final MechantRequest request = requests.mechantRequest();
        Activity activity = new CreateAndEditProxy<MechantProxy>(MechantProxy.class, request, ScaffoldApp.isMobile() ? MechantMobileEditView.instance() : MechantEditView.instance(), placeController) {

            @Override
            protected RequestContext createSaveRequest(MechantProxy proxy) {
                request.persist().using(proxy);
                return request;
            }
        };
        return new MechantEditActivityWrapper(requests, ScaffoldApp.isMobile() ? MechantMobileEditView.instance() : MechantEditView.instance(), activity, null);
    }

    private Activity makeEditActivity(ProxyPlace place) {
        MechantEditView.instance().setCreating(false);
        EntityProxyId<MechantProxy> proxyId = coerceId(place);
        Activity activity = new FindAndEditProxy<MechantProxy>(proxyId, requests, ScaffoldApp.isMobile() ? MechantMobileEditView.instance() : MechantEditView.instance(), placeController) {

            @Override
            protected RequestContext createSaveRequest(MechantProxy proxy) {
                MechantRequest request = requests.mechantRequest();
                request.persist().using(proxy);
                return request;
            }
        };
        return new MechantEditActivityWrapper(requests, ScaffoldApp.isMobile() ? MechantMobileEditView.instance() : MechantEditView.instance(), activity, proxyId);
    }
}
