// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package org.laby.client.scaffold.laby.activity;

import org.laby.client.managed.request.ApplicationRequestFactory;
import org.laby.client.managed.request.NiveauProxy;
import org.laby.client.managed.request.ScoreProxy;
import org.laby.client.managed.request.ScoreRequest;
import org.laby.client.scaffold.activity.IsScaffoldMobileActivity;
import org.laby.client.scaffold.laby.ui.LabyView;
import org.laby.client.scaffold.place.ProxyListPlace;
import org.laby.client.scaffold.place.ProxyPlace;
import org.laby.client.scaffold.place.ProxyPlace.Operation;
import org.laby.shared.gae.GaeUser;
import org.laby.shared.gae.GaeUserServiceRequest;

import com.google.gwt.activity.shared.AbstractActivity;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.place.shared.Place;
import com.google.gwt.place.shared.PlaceController;
import com.google.gwt.requestfactory.shared.EntityProxy;
import com.google.gwt.requestfactory.shared.EntityProxyId;
import com.google.gwt.requestfactory.shared.Receiver;
import com.google.gwt.user.client.Window.Location;
import com.google.gwt.user.client.ui.AcceptsOneWidget;

public class LabyActivity  extends AbstractActivity implements LabyView.Delegate, IsScaffoldMobileActivity {

    protected ApplicationRequestFactory requests;

    protected EntityProxyId<NiveauProxy> proxyId;

    protected void find(Receiver<EntityProxy> callback) {
        requests.find(proxyId).with("bonus", "vilains", "cases", "joueur").fire(callback);
    }

    private final PlaceController placeController;

    private final LabyView view;

    private AcceptsOneWidget display;

    public LabyActivity(EntityProxyId<org.laby.client.managed.request.NiveauProxy> proxyId, ApplicationRequestFactory requests, PlaceController placeController, LabyView view) {
        this.placeController = placeController;
        this.proxyId = proxyId;
        this.requests = requests;
        view.setDelegate(this);
        this.view = view;
    }

    
    public void editClicked() {
        placeController.goTo(getEditButtonPlace());
    }

    public Place getBackButtonPlace() {
        return new ProxyListPlace(NiveauProxy.class);
    }

    public String getBackButtonText() {
        return "Back";
    }

    public Place getEditButtonPlace() {
        return new ProxyPlace(view.getValue().stableId(), Operation.EDIT);
    }

    public String getTitleText() {
        return "Lancer le  niveau";
    }

    public boolean hasEditButton() {
        return true;
    }

    public void onCancel() {
        onStop();
    }

    public void onStop() {
        display = null;
    }

    public void start(AcceptsOneWidget displayIn, EventBus eventBus) {
        this.display = displayIn;
        Receiver<EntityProxy> callback = new Receiver<EntityProxy>() {

            public void onSuccess(EntityProxy proxy) {
                if (proxy == null) {
                    placeController.goTo(getBackButtonPlace());
                    return;
                }
                if (display == null) {
                    return;
                }
                view.setValue((NiveauProxy) proxy);
                display.setWidget(view);
            }
        };
        find(callback);
    }


	@Override
	public void setDifficulte(int difficulte) {
		// TODO backport Laby here
		
	}


	@Override
	public void saveScore(final NiveauProxy niveau, final Integer score) {
		
		GaeUserServiceRequest request = requests.userServiceRequest();
	   final ScoreRequest scoreRequest = requests.scoreRequest();

		request.getCurrentUser().to(new Receiver<GaeUser>() {
			@Override
			public void onSuccess(GaeUser response) {
				ScoreProxy scoreProxy = scoreRequest.create(ScoreProxy.class);
				scoreProxy.setScore(new Long(score));
				scoreProxy.setNiveau(niveau);
				scoreProxy.setUserName(response.getNickname());
				scoreRequest.persist().using(scoreProxy).fire();
			}
		});

		request.fire();
		
	}


	@Override
	public void replayClicked() {
		
	}
}
